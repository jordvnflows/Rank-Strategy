// @ jordvnflows

//@version=4
strategy("Rank v2", overlay=true, pyramiding=1, initial_capital=100000.00, default_qty_type=strategy.percent_of_equity, default_qty_value=2)

//THE STRATEGY IS OPTIMIZED TO WORK W/ MOST STOCKS AND HAS A STRICT SET
//OF RULES AND ARE AS FOLLOWS:

//GOAL p TRADE 				: 1.0618*(ENTRYPRICE)
//MAX DRAWDOWN 				: ≤0.50%
//PROFITABILITY				: ≥90% (W/ RARE EXCEPTIONS)
//PROFIT FACTOR				: 10 (OPTIONS 1-2 MONTHS)
//	        			    : 20 (OPTIONS 3 MONTHS)
//AVG. TRADE				: 0.12% OR 1.2% OR 12%
//# OF TRADES				: 20

//INPUTS

	//NON-EXCLUSIVE INPUTS

xprice				       	 = hlc3
vol					         = volume
len					         = 21

	//BASELINE INPUTS

baseline_length			    = input(title="Baseline Length", type=input.integer, defval=21, minval=1)

	//SSL INPUTS

ssl_length				    = input(title="SSL Length", type=input.integer, defval=21)
ssl_matype			    	= input(title="MCGINLEY", defval="MCGINLEY")

	//TII INPUTS

majtii_length				= input(title="Major TII Length", type=input.integer, defval=21)
mintii_length				= input(title="Minor TII Length", type=input.integer, defval=7)
upperlevel			    	= input(title="TII Upper Level", type=input.integer, defval=80)
lowerlevel			    	= input(title="TII Lower Level", type=input.integer, defval=20)

	//VOLUME INPUTS

volumema_type				= input(title="Volume MA Type", type=input.string, options=["Exponential", "Simple", "Double Exponential"], defval="Simple")
volumema_length				= input(title="Volume MA Length", type=input.integer, defval=14)
vfactor				    	= input(title="Volume Breakout Factor", defval=3.1)

//BASELINE INDICATOR

nAMA					    = 0.0
nfastend				    = 0.666
nslowend				    = 0.0645

	//CALCULATIONS

xvnoise					    = abs(xprice - xprice[1])
nsignal					    = abs(xprice - xprice[baseline_length])
nnoise					    = sum(xvnoise, baseline_length)
nefratio				    = iff(nnoise != 0, nsignal / nnoise, 0)
nsmooth					    = pow(nefratio * (nfastend - nslowend) + nslowend, 2)
nAMA					    := nz(nAMA[1]) + nsmooth * (xprice - nz(nAMA[1]))

//SSL INDICATOR

	//MA FUNCTION

ma(ssl_length, xprice, type) =>

	float ssl_return 		= 0.0
	
	if (type == "MCGINLEY")
		mg 			        = 0.0
		mg 			        := na(mg[1]) ? ema(xprice, ssl_length) : mg[1] + (xprice - mg[1]) / (ssl_length * pow(xprice/mg[1], 4))
		ssl_return 		    := mg

	ssl_return	 
	
	//SSL CALCULATION
	
get_ssl_channel(ssl_length, xprice, type) =>

	hhigh 				    = float(na)
	llow			    	= float(na)
	hlv			        	= float(na)
	ssl_channel_up  		= float(na)
	ssl_channel_dwn			= float(na)

	hhigh 				    := ma(ssl_length, high, type)
	llow				    := ma(ssl_length, low, type)

	if (xprice > hhigh)
		hlv	                := 1
	else
		if (xprice < llow)
			hlv		        := -1
		else
			hlv 		    := hlv[1]

	if (hlv < 0)
		ssl_channel_dwn		:= hhigh
		ssl_channel_up		:= llow
	else
		ssl_channel_dwn		:= llow
		ssl_channel_up		:= hhigh

	[ssl_channel_up, ssl_channel_dwn]

[ssl_channel_up, ssl_channel_dwn] = get_ssl_channel(ssl_length, close, ssl_matype)

//TII INDICATOR

	//MOVING AVERAGE

simple_ma				    = sma(xprice, majtii_length)

	//CALCULATIONS

positive_sum				= 0.0
negative_sum				= 0.0

for i = 0 to mintii_length - 1
	pprc				    = nz(xprice[i])
	aavg			    	= nz(simple_ma[i])
	positive_sum			:= positive_sum + (pprc > aavg ? pprc - aavg : 0)
	negative_sum			:= negative_sum + (pprc > aavg ? 0 : aavg - pprc)

tii					        = 100 * positive_sum / (positive_sum + negative_sum)

//VOLUME INDICATOR

	//FUNCTIONS

bull					    = close > open ? vol : 0
bear					    = open > close ? vol : 0

	//MOVING AVERAGE

dema(xprice, len) => (2 * ema(xprice, len) - ema(ema(xprice, len), len))

	//BULL & BEAR MA CALCULATIONS

bullma					    = volumema_type == "Exponential" ? ema(bull, volumema_length) : volumema_type == "Double Exponential" ? dema(bull, volumema_length) : sma(bull, volumema_length)

bearma				    	= volumema_type == "Exponential" ? ema(bear, volumema_length) : volumema_type == "Double Exponential" ? dema(bear, volumema_length) : sma(bear, volumema_length)

	//MOVING AVERAGE DIFFERENCES

vf_dif				    	= bullma - bearma
vfabs				    	= vf_dif > 0 ? vf_dif : vf_dif * (-1)

	//VOLUME SPIKES

gsig					    = crossover(bull, bullma * vfactor) ? vol : na
nsig				    	= crossover(bear, bearma * vfactor) ? vol : na

//PLOTTING

	//BASELINE PLOT

plot(nAMA, color=color.black, title="KAMA")

	//SSL PLOT

sslplot_up                  = plot(ssl_channel_up, title="SSL Up", linewidth=1, color=color.aqua)
sslplot_dwn                 = plot(ssl_channel_dwn, title="SSL Down", linewidth=2, color=color.maroon)

	//TII PLOT

		//NO ANSWER

	//VOLUME PLOT

		//NO ANSWER

//TIMING

start					    = timestamp(2015,1,1)
end					        = timestamp(2022,1,1)

//STRATEGY CONDITIONS

	//BASELINE REQUIREMENT

baseline_up				    = open > nAMA

	//SSL REQUIREMENT

c1_up					    = ssl_channel_up > ssl_channel_dwn and baseline_up

	//TII REQUIREMENT

c2_up					    = tii > upperlevel and c1_up

	//VOLUME REQUIREMENT

go_long					    = bullma > bearma and c2_up

	//EXITING REQUIREMENT

close_long				    = close < nAMA

//ENTRY

if time >= start and time <= end
	if (go_long)
		strategy.entry("L", true, when=go_long)
		strategy.exit("L E", profit=close * 0.0618 / syminfo.mintick, stop=nAMA * 0.95)

//POSITION CANCELLATION

if (close_long)
	strategy.cancel_all()
